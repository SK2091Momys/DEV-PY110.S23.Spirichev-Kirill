type: output
files:
- name: main.py
  visible: true
  placeholders:
  - offset: 229
    length: 71
    placeholder_text: "...)  # TODO записать регулярное выражение для поиска слова\
      \ любой длины"
    initial_state:
      length: 71
      offset: 229
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: r"\w+")
  - offset: 355
    length: 64
    placeholder_text: ")  # TODO вызвать от регулярного выражения методы search и\
      \ group"
    initial_state:
      length: 64
      offset: 355
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: .search(word).group())
  text: |
    import re


    def task():
        word_list = [
            ",./ sdfsdf",
            "Ddfsdf",
            "@@##,sdfsdf",
            "123_sdfsdf",
            "123sdfsdf",
            ", s,dfsdf",
            "123, fewfew",
        ]

        word_pattern = re.compile(...)  # TODO записать регулярное выражение для поиска слова любой длины

        for word in word_list:
            print(word_pattern)  # TODO вызвать от регулярного выражения методы search и group


    if __name__ == "__main__":
        task()
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
- name: tests/output.txt
  visible: false
  text: |
    sdfsdf
    Ddfsdf
    sdfsdf
    123_sdfsdf
    123sdfsdf
    s
    123
  learner_created: false
status: Unchecked
record: -1
